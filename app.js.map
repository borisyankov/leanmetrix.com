{"version":3,"sources":["app.js","auth/auth-ctrl.js","create-account/compareto.js","create-account/create-account-ctrl.js","create-account/username-available-validator.js","messages/domains-ctrl.js","messages/messages-ctrl.js","serivces/auth-service.js","serivces/firebase-service.js","signin/signin-ctrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["'use strict';\r\n\r\nvar firebase = new Firebase(\"https://leanmetrix.firebaseio.com\");\r\n\r\nangular.module('leanMetrix', ['ngMessages', 'firebase'])\r\n\r\n.run(function() {\r\n\r\n});\r\n","angular.module('leanMetrix').controller('authCtrl', function($rootScope) {\r\n\r\n    var model = this;\r\n\r\n    firebase.onAuth(function(authData) {\r\n\r\n        $rootScope.authData = authData;\r\n\r\n        if (!$rootScope.$$phase) $rootScope.$apply();        \r\n    });\r\n\r\n    this.signOut = function() {\r\n        firebase.unauth();\r\n    }\r\n});\r\n","angular.module('leanMetrix').directive(\"compareTo\", function() {\r\n    return {\r\n        require: \"ngModel\",\r\n        scope: {\r\n            otherModelValue: \"=compareTo\"\r\n        },\r\n        link: function(scope, element, attributes, ngModel) {\r\n\r\n            ngModel.$validators.compareTo = function(modelValue) {\r\n                return modelValue == scope.otherModelValue;\r\n            };\r\n\r\n            scope.$watch(\"otherModelValue\", function() {\r\n                ngModel.$validate();\r\n            });\r\n        }\r\n    };\r\n});","angular.module('leanMetrix').controller('createAccountCtrl', function(AuthService) {\r\n\r\n    var model = this;\r\n\r\n    this.message = \"\";\r\n\r\n    this.user = {\r\n        email: \"bobtester@mailinator.com\",\r\n        password: \"123123\",\r\n        confirmPassword: \"123123\"\r\n    };\r\n\r\n    this.submit = function(isValid) {\r\n        if (isValid) {\r\n            AuthService.create(model.user.email, model.user.password).success(function(data) {\r\n                AuthenticationService.isLogged = true;\r\n                $window.sessionStorage.token = data.token;\r\n                $location.path(\"/admin\");\r\n            }).error(function(status, data) {\r\n                console.log(status, data);\r\n            });\r\n        } else {\r\n            model.message = \"There are still invalid fields below\";\r\n        }\r\n    };\r\n});\r\n","\r\nangular.module('leanMetrix').directive('usernameAvailableValidator', function($q, AuthService) {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function($scope, element, attrs, ngModel) {\r\n            ngModel.$asyncValidators.usernameAvailable = function(email) {\r\n                var deferred = $q.defer();\r\n                deferred.resolve(false);\r\n                return deferred.promise;\r\n                return AuthService.exist(email);\r\n            };\r\n        }\r\n    }\r\n});\r\n","angular.module('leanMetrix').controller('domainsCtrl', function($firebase, FirebaseService) {\r\n\r\n    var model = this;\r\n\r\n    var firebase = FirebaseService.getInstance('/domains/');\r\n    var sync = $firebase(firebase);\r\n\r\n\r\n    console.log(this.domains);\r\n\r\n    this.addDomain = function() {\r\n        firebase.push().set(model.newDomain);\r\n        model.newDomain = '';\r\n    };\r\n});\r\n","angular.module('leanMetrix').controller('messagesCtrl', function($scope, $firebase, FirebaseService) {\r\n\r\n    var ctrl = this,\r\n        firebaseDomains = FirebaseService.getInstance('/domains/');\r\n\r\n    ctrl.domains = $firebase(firebaseDomains).$asArray();\r\n\r\n    $scope.$watch('currentDomain', function(newValue, oldValue) {\r\n\r\n        if (!newValue) return;\r\n\r\n        var url = newValue.$value.replace('.', '@') + '/messages/';\r\n        var firebaseMessages = FirebaseService.getInstance(url);\r\n        ctrl.messages = $firebase(firebaseMessages).$asArray();\r\n    });\r\n\r\n});\r\n","angular.module('leanMetrix').factory('AuthService', function($firebase, $http, $rootScope) {\r\n\r\n    var apiRoot = 'http://localhost:3000';\r\n    //var firebase = new Firebase(\"https://leanmetrix.firebaseio.com/\");\r\n\r\n    return {\r\n        signIn: function(email, password) {\r\n            firebase.authWithPassword({\r\n                email: email,\r\n                password: password,\r\n            }, function(error, authData) {\r\n                if (error === null) {\r\n                    console.log(authData);\r\n                } else {\r\n                    console.log(\"Error authenticating user:\", error);\r\n                }\r\n            });\r\n        },\r\n        create: function(email, password) {\r\n\r\n            var account = {\r\n                email: email,\r\n                password: password,\r\n            };\r\n\r\n            firebase.createUser(account, function(error) {\r\n                console.log(error);\r\n            });\r\n\r\n             $http.post(apiRoot + '/createaccount/', account);\r\n        },\r\n        exist: function(email) {\r\n            return $http.get(apiRoot + '/users/?email=' + email);\r\n        },\r\n        currentUser: function() {\r\n            return $rootScope.authData.password.email;\r\n        }\r\n    }\r\n});\r\n","angular.module('leanMetrix').factory('FirebaseService', function(Firebase, AuthService) {\r\n\r\n    function firebaseUserUrl() {\r\n        return 'https://leanmetrix.firebaseio.com/' + AuthService.currentUser().replace('.', '@') + '/';\r\n    }\r\n\r\n    function getInstance(path) {\r\n        console.log('isntance', firebaseUserUrl() + path)\r\n        return new Firebase(firebaseUserUrl() + path);\r\n    }\r\n\r\n    return {\r\n        firebaseUserUrl: firebaseUserUrl,\r\n        getInstance: getInstance\r\n    }\r\n});\r\n","angular.module('leanMetrix').controller('signInCtrl', function(AuthService) {\r\n\r\n    var model = this;\r\n\r\n    this.message = \"\";\r\n\r\n    this.user = {\r\n        email: \"\",\r\n        password: \"\"\r\n    };\r\n\r\n    this.submit = function(isValid) {\r\n        if (isValid) {\r\n            AuthService.signIn(model.user.email, model.user.password);\r\n        } else {\r\n            model.message = \"There are still invalid fields below\";\r\n        }\r\n    };\r\n\r\n    this.logout = function logout() {\r\n        if (AuthenticationService.isLogged) {\r\n            AuthenticationService.isLogged = false;\r\n            delete $window.sessionStorage.token;\r\n            $location.path(\"/\");\r\n        }\r\n    }\r\n\r\n});\r\n"],"sourceRoot":"/source/"}